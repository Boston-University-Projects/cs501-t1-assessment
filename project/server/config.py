import os
# basedir = os.path.abspath(os.path.dirname(__file__))
basedir = os.path.dirname(os.path.abspath(__file__))
db_path = os.path.join(basedir, "diagnostic.db")
postgres_local_base = 'sqlite:///'
database_name = 'diagnostic.db'


class BaseConfig:
    """Base configuration."""
    # Generated by os.urandom(24)
    SECRET_KEY = os.getenv('SECRET_KEY', "\xfd\xb0\xb4\x81BUE\x7fU\x00\xb64[\x89\x9a\x05\x9be\x1e\xb4\xdc]kU")
    DEBUG = False
    BCRYPT_LOG_ROUNDS = 13
    SQLALCHEMY_TRACK_MODIFICATIONS = False


class DevelopmentConfig(BaseConfig):
    """Development configuration."""
    DEBUG = True
    BCRYPT_LOG_ROUNDS = 4
    SQLALCHEMY_DATABASE_URI = postgres_local_base + database_name


class TestingConfig(BaseConfig):
    """Testing configuration."""
    DEBUG = True
    TESTING = True
    BCRYPT_LOG_ROUNDS = 4
    SQLALCHEMY_DATABASE_URI = postgres_local_base + database_name + '_test.db'
    PRESERVE_CONTEXT_ON_EXCEPTION = False


class ProductionConfig(BaseConfig):
    """Production configuration."""
    SECRET_KEY = 'diagnostic_secret'
    DEBUG = False
    # SQLALCHEMY_DATABASE_URI = 'sqlite:///diagnostic'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///diagnostic.db'
